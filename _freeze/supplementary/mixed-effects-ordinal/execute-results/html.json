{
  "hash": "974dd16a7d2a83ef459108f26d189fec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Random-effects Models\"\nformat: \n  html:\n    toc: true\nbibliography: \"https://raw.githubusercontent.com/filippogambarota/bib-database/main/references.bib\"\ncsl: \"https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl\"\n---\n\n\n\n\nWe can extended the base CM model by including random-effects. For example, if the same participant responds to the same item/trial multiple times or responds to multiple items we need to take into account the nested data-structure. @Agresti2010-rz formalized the random-intercept CM model in @eq-cm-random-intercept.\n\n$$\nP(Y \\leq k) = g^{-1}[(\\alpha_k + u_i) - \\mathbf{X}\\boldsymbol{\\beta}]\n$$ {#eq-cm-random-intercept}\n\nWhere $u_i$ is the by-subject adjustment to the overall intercept-threshold. As in standard mixed-effects models, the random-effect of the intercept is sampled from a normal distribution with $\\mu = 0$ and standard deviation $\\sigma_{u}$, thus $u_i \\sim \\mathcal{N}(0, \\sigma_u)$. We can use the same simulation strategies (sampling from multinomial distribution or latent approach) of the paper but introducing the random-effect. We simulate $N = 100$ subjects divided into two groups. Each subject performs $100$ trial responding on a ordinal item.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulation parameters\nset.seed(2024)\nk <- 4\nprobs0 <- rep(1/k, k)\nN <- 100 # sample size\nn <- N/2\nnt <- 100 # number of trials\nb1 <- log(3)\nsb0 <- 0.5 # intercept standard deviation\ngroup <- c(0, 1) # group\nalpha <- prob_to_alpha(probs0, link = \"logit\")\n\n# Data structure\ndat0 <- dat1 <- expand.grid(id = 1:n, trial = 1:nt)\ndat0$group <- 0\ndat1$group <- 1\ndat0$id <- rep(1:n, nt)\ndat1$id <- rep((n + 1):N, nt)\ndat <- rbind(dat0, dat1)\n\nalphai <- rnorm(N, 0, sb0)\n```\n:::\n\n\n## Sampling from multinomial distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\ncump <- lapply(alpha, function(a) plogis(with(dat, (a + alphai[id]) - (b1 * group))))\np <- t(apply(cbind(0, data.frame(cump), 1), 1, diff))\nnames(p) <- paste0(\"py\", 1:k)\ndat <- cbind(dat, p)\n\ndat$y <- apply(dat[, 4:ncol(dat)], 1, function(p) sample(1:k, 1, replace = TRUE, prob = p))\ndat$y <- ordered(dat$y)\n\nfit <- clmm(y ~ group + (1|id), data = dat, link = \"logit\")\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCumulative Link Mixed Model fitted with the Laplace approximation\n\nformula: y ~ group + (1 | id)\ndata:    dat\n\n link  threshold nobs  logLik    AIC      niter     max.grad cond.H \n logit flexible  10000 -12676.72 25363.43 324(1014) 4.61e-03 1.4e+02\n\nRandom effects:\n Groups Name        Variance Std.Dev.\n id     (Intercept) 0.2582   0.5081  \nNumber of groups:  id 100 \n\nCoefficients:\n      Estimate Std. Error z value Pr(>|z|)    \ngroup   1.1178     0.1086   10.29   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThreshold coefficients:\n    Estimate Std. Error z value\n1|2 -1.14160    0.07813 -14.611\n2|3 -0.04105    0.07697  -0.533\n3|4  1.06992    0.07777  13.757\n```\n\n\n:::\n:::\n\n\n## Sampling from the latent variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nystar <- with(dat, alphai[id] + (b1*group)) + rlogis(nrow(dat), 0, 1)\ndat$y2 <- ordered(findInterval(ystar, alpha) + 1)\nfit2 <- clmm(y2 ~ group + (1|id), data = dat, link = \"logit\")\nsummary(fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCumulative Link Mixed Model fitted with the Laplace approximation\n\nformula: y2 ~ group + (1 | id)\ndata:    dat\n\n link  threshold nobs  logLik    AIC      niter    max.grad cond.H \n logit flexible  10000 -12795.34 25600.68 302(910) 1.32e-03 1.5e+02\n\nRandom effects:\n Groups Name        Variance Std.Dev.\n id     (Intercept) 0.2729   0.5224  \nNumber of groups:  id 100 \n\nCoefficients:\n      Estimate Std. Error z value Pr(>|z|)    \ngroup   1.0646     0.1111    9.58   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThreshold coefficients:\n    Estimate Std. Error z value\n1|2 -1.07709    0.07986 -13.487\n2|3  0.01468    0.07883   0.186\n3|4  1.11972    0.07965  14.057\n```\n\n\n:::\n:::\n\n\nIn both simulations we are able to recover the parameters. For fitting the model we use the `clmm()` function that allows specifying the random-effects structure. The syntax is the same as the `lme4` package for standard mixed-effects models.\n\nWe can extend the simulation including also random slopes. The `group` effect need to be a within effect now, thus we can imagine to have two conditions in the experiment with 100 trials each. We can extend the @eq-cm-random-intercept with @eq-cm-random-slope. $\\beta_{1_i}$ are the by-subjects adjustments to the overall $\\beta_1$ effect, still sampled from a normal distribution.\n\n$$\nP(Y \\leq k) = g^{-1}[(\\alpha_k + u_i) - (\\beta_1 + \\beta_{1_i})X_1]\n$${#eq-cm-random-slope}\n\nLet's use the latent formulation directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\ndat <- expand.grid(id = 1:N, trials = 1:nt, cond = c(0, 1))\nsb1 <- 0.2 # slope standard deviation\nalphai <- rnorm(N, 0, sb0)\nb1i <- rnorm(N, 0, sb1)\n\nystar <- with(dat, alphai[id] + ((b1 + b1i[id]) * cond)) + rlogis(nrow(dat), 0, 1)\ndat$y <- ordered(findInterval(ystar, alpha) + 1)\nfit <- clmm(y ~ cond + (cond|id), data = dat, link = \"logit\", )\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCumulative Link Mixed Model fitted with the Laplace approximation\n\nformula: y ~ cond + (cond | id)\ndata:    dat\n\n link  threshold nobs  logLik    AIC      niter     max.grad cond.H \n logit flexible  20000 -25434.35 50882.69 626(2508) 1.09e-02 1.1e+02\n\nRandom effects:\n Groups Name        Variance Std.Dev. Corr   \n id     (Intercept) 0.29342  0.5417          \n        cond        0.06647  0.2578   -0.023 \nNumber of groups:  id 100 \n\nCoefficients:\n     Estimate Std. Error z value Pr(>|z|)    \ncond  1.10553    0.03729   29.65   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThreshold coefficients:\n    Estimate Std. Error z value\n1|2 -1.08130    0.05828 -18.553\n2|3  0.03904    0.05758   0.678\n3|4  1.15537    0.05818  19.858\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}